// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Event
	Stat
	StatInterval
	Nothing
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Consumer  string `protobuf:"bytes,2,opt,name=consumer" json:"consumer,omitempty"`
	Method    string `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	Host      string `protobuf:"bytes,4,opt,name=host" json:"host,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Event) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *Event) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Event) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type Stat struct {
	Timestamp  int64             `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	ByMethod   map[string]uint64 `protobuf:"bytes,2,rep,name=by_method,json=byMethod" json:"by_method,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ByConsumer map[string]uint64 `protobuf:"bytes,3,rep,name=by_consumer,json=byConsumer" json:"by_consumer,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *Stat) Reset()                    { *m = Stat{} }
func (m *Stat) String() string            { return proto.CompactTextString(m) }
func (*Stat) ProtoMessage()               {}
func (*Stat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Stat) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Stat) GetByMethod() map[string]uint64 {
	if m != nil {
		return m.ByMethod
	}
	return nil
}

func (m *Stat) GetByConsumer() map[string]uint64 {
	if m != nil {
		return m.ByConsumer
	}
	return nil
}

type StatInterval struct {
	IntervalSeconds uint64 `protobuf:"varint,1,opt,name=interval_seconds,json=intervalSeconds" json:"interval_seconds,omitempty"`
}

func (m *StatInterval) Reset()                    { *m = StatInterval{} }
func (m *StatInterval) String() string            { return proto.CompactTextString(m) }
func (*StatInterval) ProtoMessage()               {}
func (*StatInterval) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatInterval) GetIntervalSeconds() uint64 {
	if m != nil {
		return m.IntervalSeconds
	}
	return 0
}

type Nothing struct {
	Dummy bool `protobuf:"varint,1,opt,name=dummy" json:"dummy,omitempty"`
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Nothing) GetDummy() bool {
	if m != nil {
		return m.Dummy
	}
	return false
}

func init() {
	proto.RegisterType((*Event)(nil), "service.Event")
	proto.RegisterType((*Stat)(nil), "service.Stat")
	proto.RegisterType((*StatInterval)(nil), "service.StatInterval")
	proto.RegisterType((*Nothing)(nil), "service.Nothing")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Admin service

type AdminClient interface {
	Logging(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (Admin_LoggingClient, error)
	Statistics(ctx context.Context, in *StatInterval, opts ...grpc.CallOption) (Admin_StatisticsClient, error)
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Logging(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (Admin_LoggingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Admin_serviceDesc.Streams[0], c.cc, "/service.Admin/Logging", opts...)
	if err != nil {
		return nil, err
	}
	x := &adminLoggingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Admin_LoggingClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type adminLoggingClient struct {
	grpc.ClientStream
}

func (x *adminLoggingClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminClient) Statistics(ctx context.Context, in *StatInterval, opts ...grpc.CallOption) (Admin_StatisticsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Admin_serviceDesc.Streams[1], c.cc, "/service.Admin/Statistics", opts...)
	if err != nil {
		return nil, err
	}
	x := &adminStatisticsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Admin_StatisticsClient interface {
	Recv() (*Stat, error)
	grpc.ClientStream
}

type adminStatisticsClient struct {
	grpc.ClientStream
}

func (x *adminStatisticsClient) Recv() (*Stat, error) {
	m := new(Stat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Admin service

type AdminServer interface {
	Logging(*Nothing, Admin_LoggingServer) error
	Statistics(*StatInterval, Admin_StatisticsServer) error
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_Logging_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Nothing)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServer).Logging(m, &adminLoggingServer{stream})
}

type Admin_LoggingServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type adminLoggingServer struct {
	grpc.ServerStream
}

func (x *adminLoggingServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Admin_Statistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatInterval)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServer).Statistics(m, &adminStatisticsServer{stream})
}

type Admin_StatisticsServer interface {
	Send(*Stat) error
	grpc.ServerStream
}

type adminStatisticsServer struct {
	grpc.ServerStream
}

func (x *adminStatisticsServer) Send(m *Stat) error {
	return x.ServerStream.SendMsg(m)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logging",
			Handler:       _Admin_Logging_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Statistics",
			Handler:       _Admin_Statistics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

// Client API for Biz service

type BizClient interface {
	Check(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error)
	Add(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error)
	Test(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error)
}

type bizClient struct {
	cc *grpc.ClientConn
}

func NewBizClient(cc *grpc.ClientConn) BizClient {
	return &bizClient{cc}
}

func (c *bizClient) Check(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/service.Biz/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizClient) Add(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/service.Biz/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizClient) Test(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/service.Biz/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Biz service

type BizServer interface {
	Check(context.Context, *Nothing) (*Nothing, error)
	Add(context.Context, *Nothing) (*Nothing, error)
	Test(context.Context, *Nothing) (*Nothing, error)
}

func RegisterBizServer(s *grpc.Server, srv BizServer) {
	s.RegisterService(&_Biz_serviceDesc, srv)
}

func _Biz_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Biz/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServer).Check(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biz_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Biz/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServer).Add(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Biz_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Biz/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServer).Test(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

var _Biz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Biz",
	HandlerType: (*BizServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Biz_Check_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Biz_Add_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _Biz_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x5d, 0x6b, 0x1a, 0x41,
	0x14, 0x75, 0xbf, 0xd4, 0xbd, 0xd6, 0x2a, 0x43, 0x5b, 0x96, 0x6d, 0x4b, 0x65, 0x9f, 0x2c, 0x6d,
	0x6d, 0xb1, 0x10, 0x4c, 0x42, 0x02, 0x2a, 0x3e, 0x04, 0x92, 0x3c, 0xac, 0x79, 0x97, 0xfd, 0x18,
	0xdc, 0x41, 0x67, 0x47, 0x76, 0xc6, 0x85, 0xcd, 0x9f, 0xc8, 0x7b, 0x7e, 0x6d, 0xd8, 0xd9, 0x75,
	0x83, 0x26, 0x10, 0xf3, 0x76, 0xcf, 0xb9, 0xf7, 0x9c, 0x7b, 0xe6, 0x32, 0xd0, 0xe6, 0x38, 0x49,
	0x49, 0x80, 0x07, 0x9b, 0x84, 0x09, 0x86, 0x1a, 0x25, 0x74, 0x28, 0x18, 0xb3, 0x14, 0xc7, 0x02,
	0x7d, 0x03, 0x53, 0x10, 0x8a, 0xb9, 0xf0, 0xe8, 0xc6, 0x52, 0x7a, 0x4a, 0x5f, 0x73, 0x9f, 0x09,
	0x64, 0x43, 0x33, 0x60, 0x31, 0xdf, 0x52, 0x9c, 0x58, 0x6a, 0x4f, 0xe9, 0x9b, 0x6e, 0x85, 0xd1,
	0x17, 0xa8, 0x53, 0x2c, 0x22, 0x16, 0x5a, 0x9a, 0xec, 0x94, 0x08, 0x21, 0xd0, 0x23, 0xc6, 0x85,
	0xa5, 0x4b, 0x56, 0xd6, 0xce, 0xa3, 0x0a, 0xfa, 0x5c, 0x78, 0x6f, 0xad, 0x1b, 0x81, 0xe9, 0x67,
	0x8b, 0xd2, 0x55, 0xed, 0x69, 0xfd, 0xd6, 0xf0, 0xeb, 0x60, 0xf7, 0x82, 0x5c, 0x3f, 0x98, 0x64,
	0x37, 0xb2, 0x3b, 0x8b, 0x45, 0x92, 0xb9, 0x4d, 0xbf, 0x84, 0xe8, 0x12, 0x5a, 0x7e, 0xb6, 0xa8,
	0xb2, 0x6a, 0x52, 0xfb, 0xfd, 0x50, 0x3b, 0x2d, 0xfb, 0x85, 0x1a, 0xfc, 0x8a, 0xb0, 0xcf, 0xa1,
	0xbd, 0x67, 0x8d, 0xba, 0xa0, 0xad, 0x70, 0x26, 0x23, 0x9a, 0x6e, 0x5e, 0xa2, 0x4f, 0x60, 0xa4,
	0xde, 0x7a, 0x8b, 0xe5, 0x21, 0x74, 0xb7, 0x00, 0x67, 0xea, 0x48, 0xb1, 0x2f, 0xa0, 0x73, 0xe0,
	0xfd, 0x1e, 0xb9, 0x73, 0x0a, 0x1f, 0xf2, 0x7c, 0x57, 0xb1, 0xc0, 0x49, 0xea, 0xad, 0xd1, 0x4f,
	0xe8, 0x92, 0xb2, 0x5e, 0x70, 0x1c, 0xb0, 0x38, 0xe4, 0xd2, 0x48, 0x77, 0x3b, 0x3b, 0x7e, 0x5e,
	0xd0, 0xce, 0x0f, 0x68, 0xdc, 0x32, 0x11, 0x91, 0x78, 0x99, 0xfb, 0x87, 0x5b, 0x4a, 0x8b, 0x9d,
	0x4d, 0xb7, 0x00, 0xc3, 0x0d, 0x18, 0xe3, 0x90, 0x92, 0x18, 0xfd, 0x85, 0xc6, 0x35, 0x5b, 0x2e,
	0xf3, 0xc9, 0x6e, 0x75, 0x96, 0x52, 0x6b, 0x7f, 0xac, 0x18, 0xf9, 0x29, 0x9c, 0xda, 0x3f, 0x05,
	0x9d, 0x00, 0xe4, 0xa9, 0x08, 0x17, 0x24, 0xe0, 0xe8, 0xf3, 0xde, 0x29, 0x77, 0x51, 0xed, 0xf6,
	0x1e, 0x9d, 0xeb, 0x86, 0x0f, 0x0a, 0x68, 0x13, 0x72, 0x8f, 0xfe, 0x80, 0x31, 0x8d, 0x70, 0xb0,
	0x7a, 0x65, 0xdd, 0x0b, 0xc6, 0xa9, 0xa1, 0x5f, 0xa0, 0x8d, 0xc3, 0xf0, 0xc8, 0xe1, 0xdf, 0xa0,
	0xdf, 0x61, 0x2e, 0x8e, 0x9b, 0xf6, 0xeb, 0xf2, 0xef, 0xff, 0x7f, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0x4d, 0xf7, 0x48, 0xff, 0x0c, 0x03, 0x00, 0x00,
}
